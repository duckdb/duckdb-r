From cb74d3e632c44c8772b6698e17e3f5f4fda255f6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Kirill=20M=C3=BCller?= <kirill@cynkra.com>
Date: Tue, 11 Mar 2025 21:38:45 +0100
Subject: [PATCH] Fix clang 20

---
 src/duckdb/third_party/fmt/include/fmt/format.h | 10 +++++-----
 src/duckdb/third_party/httplib/httplib.hpp      | 10 +++++-----
 2 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/src/duckdb/third_party/fmt/include/fmt/format.h b/src/duckdb/third_party/fmt/include/fmt/format.h
index ad4fe83ab..e92437a2e 100644
--- a/src/duckdb/third_party/fmt/include/fmt/format.h
+++ b/src/duckdb/third_party/fmt/include/fmt/format.h
@@ -548,7 +548,7 @@ class u8string_view : public basic_string_view<fmt_char8_t> {
 
 #if FMT_USE_USER_DEFINED_LITERALS
 inline namespace literals {
-inline u8string_view operator"" _u(const char* s, std::size_t n) {
+inline u8string_view operator""_u(const char* s, std::size_t n) {
   return {s, n};
 }
 }  // namespace literals
@@ -3342,11 +3342,11 @@ FMT_CONSTEXPR internal::udl_formatter<Char, CHARS...> operator""_format() {
     std::string message = "The answer is {}"_format(42);
   \endrst
  */
-FMT_CONSTEXPR internal::udl_formatter<char> operator"" _format(const char* s,
+FMT_CONSTEXPR internal::udl_formatter<char> operator""_format(const char* s,
                                                                std::size_t n) {
   return {{s, n}};
 }
-FMT_CONSTEXPR internal::udl_formatter<wchar_t> operator"" _format(
+FMT_CONSTEXPR internal::udl_formatter<wchar_t> operator""_format(
     const wchar_t* s, std::size_t n) {
   return {{s, n}};
 }
@@ -3362,11 +3362,11 @@ FMT_CONSTEXPR internal::udl_formatter<wchar_t> operator"" _format(
     fmt::print("Elapsed time: {s:.2f} seconds", "s"_a=1.23);
   \endrst
  */
-FMT_CONSTEXPR internal::udl_arg<char> operator"" _a(const char* s,
+FMT_CONSTEXPR internal::udl_arg<char> operator""_a(const char* s,
                                                     std::size_t n) {
   return {{s, n}};
 }
-FMT_CONSTEXPR internal::udl_arg<wchar_t> operator"" _a(const wchar_t* s,
+FMT_CONSTEXPR internal::udl_arg<wchar_t> operator""_a(const wchar_t* s,
                                                        std::size_t n) {
   return {{s, n}};
 }
diff --git a/src/duckdb/third_party/httplib/httplib.hpp b/src/duckdb/third_party/httplib/httplib.hpp
index 44cd5be40..58c5dcf1d 100644
--- a/src/duckdb/third_party/httplib/httplib.hpp
+++ b/src/duckdb/third_party/httplib/httplib.hpp
@@ -3419,7 +3419,7 @@ inline unsigned int str2tag(const std::string &s) {
 
 namespace udl {
 
-inline constexpr unsigned int operator "" _t(const char *s, size_t l) {
+inline constexpr unsigned int operator ""_t(const char *s, size_t l) {
   return str2tag_core(s, l, 0);
 }
 
@@ -3434,7 +3434,7 @@ find_content_type(const std::string &path,
   auto it = user_data.find(ext);
   if (it != user_data.end()) { return it->second; }
 
-  using udl::operator "" _t;
+  using udl::operator ""_t;
 
   switch (str2tag(ext)) {
   default: return default_content_type;
@@ -3492,7 +3492,7 @@ find_content_type(const std::string &path,
 }
 
 inline bool can_compress_content_type(const std::string &content_type) {
-  using udl::operator "" _t;
+  using udl::operator ""_t;
 
   auto tag = str2tag(content_type);
 
@@ -7093,9 +7093,9 @@ inline bool ClientImpl::redirect(Request &req, Response &res, Error &error) {
   if (next_scheme.empty()) { next_scheme = scheme; }
   if (next_host.empty()) { next_host = host_; }
   if (next_path.empty()) { next_path = "/"; }
-  
+
   auto path = detail::decode_url(next_path, true, std::set<char> {'/'}) + next_query;
-	
+
   if (next_scheme == scheme && next_host == host_ && next_port == port_) {
     return detail::redirect(*this, req, res, path, location, error);
   } else {
-- 
2.48.1

