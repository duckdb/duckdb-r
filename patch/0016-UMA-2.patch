From 5f581bc0fed9f21d9d6701bd585e1e1262a65da2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Kirill=20M=C3=BCller?= <kirill@cynkra.com>
Date: Fri, 14 Mar 2025 07:39:14 +0100
Subject: [PATCH 16/17] UMA 2

---
 .../common/types/row/tuple_data_segment.cpp   | 20 +++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/src/duckdb/src/common/types/row/tuple_data_segment.cpp b/src/duckdb/src/common/types/row/tuple_data_segment.cpp
index d14c0e0ba..c3383f3cb 100644
--- a/src/duckdb/src/common/types/row/tuple_data_segment.cpp
+++ b/src/duckdb/src/common/types/row/tuple_data_segment.cpp
@@ -15,23 +15,23 @@ void TupleDataChunkPart::SetHeapEmpty() {
 	base_heap_ptr = nullptr;
 }
 
-void SwapTupleDataChunkPart(TupleDataChunkPart &a, TupleDataChunkPart &b) {
-	std::swap(a.row_block_index, b.row_block_index);
-	std::swap(a.row_block_offset, b.row_block_offset);
-	std::swap(a.heap_block_index, b.heap_block_index);
-	std::swap(a.heap_block_offset, b.heap_block_offset);
-	std::swap(a.base_heap_ptr, b.base_heap_ptr);
-	std::swap(a.total_heap_size, b.total_heap_size);
-	std::swap(a.count, b.count);
+void MoveTupleDataChunkPart(TupleDataChunkPart &a, TupleDataChunkPart &b) {
+	a.row_block_index = b.row_block_index;
+	a.row_block_offset = b.row_block_offset;
+	a.heap_block_index = b.heap_block_index;
+	a.heap_block_offset = b.heap_block_offset;
+	a.base_heap_ptr = b.base_heap_ptr;
+	a.total_heap_size = b.total_heap_size;
+	a.count = b.count;
 	std::swap(a.lock, b.lock);
 }
 
 TupleDataChunkPart::TupleDataChunkPart(TupleDataChunkPart &&other) noexcept : lock((other.lock)) {
-	SwapTupleDataChunkPart(*this, other);
+	MoveTupleDataChunkPart(*this, other);
 }
 
 TupleDataChunkPart &TupleDataChunkPart::operator=(TupleDataChunkPart &&other) noexcept {
-	SwapTupleDataChunkPart(*this, other);
+	MoveTupleDataChunkPart(*this, other);
 	return *this;
 }
 
-- 
2.48.1

