% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql.R
\name{query}
\alias{query}
\alias{exec}
\title{Run an SQL query or statement}
\usage{
query(sql, conn = default_conn())

exec(sql, conn = default_conn())
}
\arguments{
\item{sql}{A SQL string}

\item{conn}{An optional connection, defaults to \code{\link[=default_conn]{default_conn()}}}
}
\value{
A data frame with the query result
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

\code{query()} runs an arbitrary SQL query using \code{\link[DBI:dbGetQuery]{DBI::dbGetQuery()}}
and returns a \link{data.frame} with the query results.
\code{exec()} runs an arbitrary SQL statement using \code{\link[DBI:dbExecute]{DBI::dbExecute()}}
and returns the number of affected rows.

These functions are intended as an easy way to interactively run DuckDB
without having to manage connections.
By default, data frame objects are available as tables.

Scripts and packages should manage their own connections
and prefer the DBI methods for more control.
}
\examples{
# Queries
query("SELECT 42")

# Statements with side effects
exec("CREATE TABLE test (a INTEGER, b VARCHAR)")
exec("INSERT INTO test VALUES (1, 'one'), (2, 'two')")
query("FROM test")

# Data frames available as views
query("FROM mtcars")
}
