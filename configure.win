#!/bin/sh

set -e

cd "$(dirname "$0")/src"

r_4_2=$(Rscript --vanilla -e 'writeLines(format(getRversion() >= "4.2"))')

# Kludge for R < 4.2, which does not have librstrtmgr.a included
if [ "$r_4_2" = "TRUE" ]; then
  echo DUCKDB_RSTRTMGR=1 > Makevars.rstrtmgr
else
  echo DUCKDB_RSTRTMGR=0 > Makevars.rstrtmgr
fi

# The purpose of this is to avoid rebuilding duckdb in every CI/CD run.
# We set the DUCKDB_R_PREBUILT_ARCHIVE environment variable to a file path
# that contains a .tar of all object files.
# This .tar file is cached and restored in CI/CD, keyed by compiler, OS,
# and hash of the duckdb/src subtree.
#
# Depending on the availability of the file, we either use the object files
# (via the rules in include/from-tar.mk), or create them as usual
# (via include/to-tar.mk). In the latter case, if the DUCKDB_R_PREBUILT_ARCHIVE
# environment variable is set, the .tar file is created.
#
# For local installations, this is typically not needed
# because ccache achieves the same purpose but better.
# In CI/CD, this approach gives better results than ccache.
#
# This logic is identical for Windows or non-Windows builds,
# only that we need to-tar-win.mk instead of to-tar.mk on Windows.
#
# This does not work for R < 4.2, where multiarch builds are used.

if [ "$r_4_2" = "TRUE" ] && [ -f "${DUCKDB_R_PREBUILT_ARCHIVE}" ] && tar -xm --force-local -f "${DUCKDB_R_PREBUILT_ARCHIVE}"; then
  cp include/from-tar.mk Makevars.duckdb
else
  cp include/to-tar-win.mk Makevars.duckdb
fi

# The duckdb sources are xz-compressed in the tarball to keep it under 5000000 bytes.
# This happens in the cleanup script.

if [ -f duckdb.tar.xz ]; then
  tar xJf duckdb.tar.xz
fi
